#!/usr/bin/perl
use strict;
use warnings;
use 5.14.2;

use Config::Tiny;
use Data::Dumper;
use Getopt::Long;

my ($opt_update_po, $opt_pull_from_deepin, $opt_git, $opt_test_lang, $opt_force, $opt_debug, $opt_update_tx_config,$opt_commit, $opt_push_lang, $opt_dump, $opt_empty_changes, $opt_help, $opt_list_project,$project_id, $resource_id , $opt_push_pot, $opt_stat, $opt_list_source_file, $opt_list_po_file, $opt_info, $opt_list_resource, $opt_auto );

if (!exists $ENV{GIT_REPO_DIR} || $ENV{GIT_REPO_DIR} eq '' ){
	say STDERR 'Not set the $GIT_REPO_DIR environment variables.';
	exit 2;
}
my $GIT_REPO_DIR= $ENV{GIT_REPO_DIR};
my $TRANS_DIR="$GIT_REPO_DIR/trans";
my $MYTX_CONFIG_FILE = "$TRANS_DIR/.tx/mytx.ini";
my $TX_CONFIG_FILE = "$TRANS_DIR/.tx/config";
my $CAREFUL_LANG = 'zh_CN';

# read config file
my $cfg = Config::Tiny->new->read( $MYTX_CONFIG_FILE );
my $tx_config = Config::Tiny->new->read( $TX_CONFIG_FILE );

my $MINIMUM_PERC=30; # pull from tx when > 30%
my $GITHUB_ACCOUNT=$cfg->{_}{github_account};
Project->init($cfg);

my $id = $ARGV[0];
if ( $id !~ /\./ ) {
	$project_id = $id;
} else {
	if ( $id =~ /.*\.$/) {
		$id =~ s/\.$//g;
	}
	$resource_id = $id;
}

GetOptions(
	"help" => \&print_help,
	"list-project" => \&Project::print_project_list,
	"stat" => \$opt_stat,
	"debug" => \$opt_debug,
	"force" => \$opt_force,
	"list-source-file" => \$opt_list_source_file,
	"list-po-file" => \$opt_list_po_file,
	"info" => \$opt_info,
	"dump" => \$opt_dump,
	"resource=s" => \$resource_id,
	"list-resource" => \$opt_list_resource,
	"project=s" => \$project_id,
	"push-pot" => \$opt_push_pot,
	"push-lang=s" => \$opt_push_lang,
	"test-lang=s" => \$opt_test_lang,
	"git=s" => \$opt_git,
	"pull-from-deepin" => \$opt_pull_from_deepin,
	"update-po" => \$opt_update_po,
	"auto" => \$opt_auto,
	"install" => \&install,
	"empty-changes" => \$opt_empty_changes,
	"commit" => \$opt_commit,
	"update-tx-config" => \&Project::update_tx_config,
);



# --project $PROJECT_NAME 
if ( $project_id ) {
	my $proj = Project->new( $project_id );
	# --list-resource
	if ( $opt_list_resource ){
		say for sort $proj->resources;
	}
	
	# --git
	elsif ( $opt_git ){
		chdir $proj->{project_root} or die $!;
		system "git $opt_git";
	}
	
	# --pull-from-deepin
	elsif ( $opt_pull_from_deepin ){
		$proj->empty_all_changes;
		$proj->git_pull_from_linuxdeepin;

		$proj->stat;
	}


	# --update-po
	elsif ( $opt_update_po ) {
		$proj->empty_all_changes;
		$proj->git_pull_from_linuxdeepin;
		$proj->update_po_from_transifex;
		$proj->update_po_from_local;
		$proj->stat;	
	}

	# --auto
	elsif ( $opt_auto ){
		$proj->empty_all_changes;
		$proj->git_pull_from_linuxdeepin;
		$proj->update_po_from_transifex;
		#$proj->update_po_from_local;

		# for each resource in the project
		for my $r ( @{ $proj->{resource_objs} } ){
			$r->update_pot_file;	
			$r->backup_git_po;
			$r->merge_po_git_with_transifex;
			$r->merge_po_with_pot;
			$r->po_change_stat;
			$r->update_locale_config_ini;
			$r->generate_mo;
			#$r->push_pot;
			#$r->push_lang( $CAREFUL_LANG );
		}

		$proj->stat;
		
	}

#	--info 
	elsif ( $opt_info ){
		$proj->info;
	}

# 	--commit
	elsif ( $opt_commit ){
		$proj->commit;
	}

# 	--push-pot
	elsif ( $opt_push_pot ){
		for my $r ( @{ $proj->{resource_objs} } ){
			$r->push_pot;
		}
	}

#	--push-lang LANG
	# TODO : 多语言参数支持
	elsif ( $opt_push_lang ){
		for my $r ( @{ $proj->{resource_objs} } ){
			$r->push_lang( $opt_push_lang );
		}
	}

#	--test-lang LANG
	elsif ( $opt_test_lang ){
		$proj->test_lang( $opt_test_lang );
	}

	# --dump
	elsif ( $opt_dump ){
		print Dumper $proj;
	}
		
	
#	--empty-changes
	elsif ( $opt_empty_changes ) {
		$proj->empty_all_changes;
	}

#	--list-source-file
	elsif ( $opt_list_source_file ) {
		for my $r ( @{ $proj->{resource_objs} } ){
			$r->list_source_file;
		}
		
	}

#	--list-po-file
	elsif ( $opt_list_po_file ) {
		for my $r ( @{ $proj->{resource_objs} } ){
			$r->list_po_file;
		}
		
	}

	# --stat
	elsif ( $opt_stat ) {
		$proj->stat;
	}

	else {
		say "wrong used --project";
	}
}

# --resource $RESOUECE_NAME 
if ( $resource_id ) {
	my $resource = Resource->new( $cfg , $resource_id );

	# --stat
	if ( $opt_stat ) {
		my $ref_po_stat = $resource->po_statistics;
		print_stat( $ref_po_stat );
	} 

#	--push-pot
	elsif ( $opt_push_pot ) {
		$resource->push_pot;	
	}

#	--push-lang LANG
	elsif ( $opt_push_lang ){
		$resource->push_lang( $opt_push_lang );
	}


	# --list-source-file
	elsif ( $opt_list_source_file ){
		$resource->list_source_file;

	}

	# --list-po-file
	elsif ( $opt_list_po_file ){
		$resource->list_po_file;

	} 

	# --info
	elsif ( $opt_info ){
		my $key_color="\e[38;5;208m";
		for (qw( project_root pot_file ) ){
			say "$key_color$_:\e[0;m $resource->{$_}";
		}
		my $po_file_filter = $resource->{data}{po_file_filter};
		say $key_color. "po_file_filter: \e[0;m$po_file_filter";
		for ( sort keys $resource->{data} ){
			if ( /^source_file_regex/ ) {
				say "$key_color$_: \e[0;m" . $resource->{data}{$_};
			}
		}
		my $resource_name = $resource->{resource_name};
		my $project_name = $resource->{project_name};
		
		my $url = $resource->{data}{resource_url};
		$url =~ s/$project_name/\e[38;5;2m$project_name\e[0;m/;
		$url =~ s/$resource_name/\e[38;5;3m$resource_name\e[0;m/;	
		say $key_color."resource_url: \e[0;m". $url;

	}

#	--dump 
	elsif ( $opt_dump ){
		print Dumper $resource;
	}

	else {
		say "wrong used --resource";
	}
}


sub print_help {
	print 
"
第一个参数为 资源标记
如果资源标记不含 . 符号，则表示项目；
如果资源标记包含 . 符号，则表示资源;

--help
--install
--debug
--force pull all translations
--list-project
--update-tx-config
--project \$PROJECT_NAME
	--empty-changes
	--pull-from-deepin
	--update-po
	--list-resource
	--auto
	--commit
	--info
	--dump
	--git \$GIT_CMD
	--list-po-file
	--list-source-file
	--push-pot
	--push-lang \$LANG
	--test-lang \$LANG
--resource \$RESOURCE_NAME
	--stat
	--info
	--dump
	--list-po-file
	--list-source-file
	--push-pot
	--push-lang \$LANG
";
	exit;
}


package Project {
use List::MoreUtils qw(any);
	my %project_list;
	my $config;

#  Project->init($cfg);
	sub init {
		my $class;
		( $class, $config ) = @_;
		my @sections = keys %{ $config };
		for ( @sections ){
			next if $_ =~ /^_/;
			my ( $dir_name , $git_branch ) = split /~/;
			$git_branch = "master" if !defined $git_branch;	
			my $sub_module_name;
			( $dir_name , $sub_module_name ) = split /\./, $dir_name;
			my $project_name;
			if ( $git_branch eq 'master' ){
				$project_name = $dir_name;
			} else {
				$project_name = "$dir_name~$git_branch";
			}
			if ( !defined $sub_module_name ){
				$project_list{ $project_name } = ['_'];
			} else {
				push @{ $project_list{ $project_name } }, $sub_module_name;
			}
		}
	}
	
# my $project = Project->new('dde~2013');
	sub new {	
		my ($class, $project_name ) = @_;
		my $git_branch = 'master';
		my $project_dir_name = $project_name;
		if ( $project_name =~ /(.*)~(.*)/ ){
			$project_dir_name = $1;
			$git_branch = $2;	
		}
		my $project_root = $GIT_REPO_DIR.'/'.$project_dir_name;

		my @resources;
		my $git_url = $config->{'_git'}{$project_dir_name};
		if ( !exists $project_list{$project_name} ){
			say STDERR "project `$project_name` undefined.";
			exit;
		} else {
			my $ref_project = $project_list{$project_name};
			my $count = scalar values $ref_project;
			my $type;
			if ( $count  == 1 && $ref_project->[0] eq '_' ) {
				#Single;
				push @resources , Resource->new( $config, $project_name );
			} else {
				#Multiple
				for (values $ref_project ){
					push @resources , Resource->new( $config, $project_name.'.'.$_ );
				}
			};
			return bless { 
				name => $project_name ,
				git_branch => $git_branch,	
				git_url => $git_url,
				dir_name => $project_dir_name,
				data => $ref_project ,
				resource_objs => \@resources,
				count => $count ,
				project_root => $project_root,
			} , $class;
		}
	}

# project->info
	sub info {
		my $self = shift;
		my $git_url = $self->{git_url};
		say "resource count: ". $self->{count}; 
		say "git url: $git_url";	
		my $pulls_url = $git_url =~ s{.git$}{/pulls}r ; 
		say "pull request: $pulls_url";
		
		my $tx_project_name = $self->{resource_objs}[0]{project_name};
		say "tx project: https://www.transifex.com/projects/p/$tx_project_name"; 

		chdir $self->{project_root} or die $!;

		say "\nGit log about author $GITHUB_ACCOUNT:";
		system "git log -n5  --author=$GITHUB_ACCOUNT --oneline";
	}

# project->commit
	sub commit {
		my $self = shift;
		chdir $self->{project_root} or die $!;

		my @COMMIT_FILE_EXTENSIONS = qw(pot ini desktop ts);
		for my $ext (@COMMIT_FILE_EXTENSIONS) {
			system "git add *.$ext";
		}

		for my $r ( @{ $self->{resource_objs} } ){
			my $ref_po_need_git_add = $r->po_change_stat;
			for ( @$ref_po_need_git_add ){
				print "\$ git add $_\n";
				system "git add $_";
			}
		}
		
		my @git_status = qx(git status -s);
		my @file_changes_info;
		my %change;

		push @COMMIT_FILE_EXTENSIONS , 'po';
		for my $s (@git_status) {
			if ($s =~ /^(A|M|D).*\.(\w+)$/) {
				my $mod_flag = $1;
				my $file_ext = $2;
				if ( any { $_ eq $file_ext } @COMMIT_FILE_EXTENSIONS ){
					$change{"$mod_flag: $file_ext"}++ ;
					push @file_changes_info, $s;
				}
			}
		}
		my $commit_str = '';
		for ( keys %change ) {
			$commit_str .= "$_($change{$_}); ";
		}
		my $file_changes = "[ File Changes ]\n" . ( join '',sort @file_changes_info );
		print $file_changes . "\n";
		print "[ Changes Count ] ".$commit_str . "\n";
		my $prompt = "\nInput some commit message:";
		print $prompt;
		my $input = <STDIN> ;
		chomp $input;
		if ( $input =~ /^ok\s+(.+)/ ) {
			$commit_str = "$1  $commit_str";
			say "\$ git commit -m \'$commit_str\'";
			system "git commit -m '$commit_str' ";
			say "\$ git push";
			system "git push";
		}	
		else {
			say "Cancel\n\$ git reset HEAD *";
			qx"git reset HEAD *";
			exit;
		}

	}


# project->update_po_from_local
	sub update_po_from_local {
		my $self = shift;
		my $local_trans_dir = "$TRANS_DIR/$self->{dir_name}";
		my $git_repo_dir = $self->{project_root};
		my $cmd = "rsync -rtpv --exclude='en.po'  --exclude='messages.mo' ".
			"--exclude='*.pot' --exclude='*.sw?' $local_trans_dir/ $git_repo_dir";
		my %po_regex_list;	
		for my $r ( @{ $self->{resource_objs} } ){
			my $po_file_regex = $r->{data}{po_file_filter};
			$po_file_regex =~ s/<lang>/([A-Za-z_]+)/;
			$po_file_regex =~ s(<project_root>/)();
			$po_regex_list{ $po_file_regex } = $r->{full_name};
		}
		say "\e[38;5;207mupdate po from `$TRANS_DIR`\e[0;m";
		open my $cmd_output, "$cmd|";

		my $cur_regex ='';
		my $cur_resource;
		my $lang = '';
		my $change_flag;
		my $match_flag;
		my $match_count=0;
		for my $line ( <$cmd_output> ){
			chomp $line;
			if ( $line =~ /^$cur_regex$/ ){
				$lang = $1;
				$change_flag = 0;
				$match_flag = 1;
			} else {
				$match_flag = 0;
				for my $rx ( keys %po_regex_list ){	
					if ( $line =~ /^$rx$/ ){
						$match_flag = 1;
						$match_count++;
						$cur_resource = $po_regex_list{$rx};
						$cur_regex = $rx; 
						delete $po_regex_list{$rx};
						$change_flag = 1;
						last;
					}

				}

			}
			my $nl='';
			$nl= "\n" if $match_count != 1;
			print "$nl$match_count. \e[38;5;3m[$cur_resource]\e[0;m\n" if  $change_flag;
			#print $lang . " " if defined $lang && $lang ne '' && $match_flag == 1;
		}
		close $cmd_output;
	}


#project->update_po_from_transifex
	sub update_po_from_transifex {
		my $self = shift;
		chdir $TRANS_DIR or die $!;
		my $ids = join ",", $self->tx_resource_ids;
		my $force_option = $opt_force ? "--force" : '' ;

		my $cmd = "tx pull -r '$ids' -a $force_option --minimum-perc=$MINIMUM_PERC";
		print "\e[38;5;207mpull po from transifex\e[0;m";
		system $cmd .q{|perl -n -e '
			use 5.12.4;
			my $oldfh = select STDOUT;
			$|=1;
			select $oldfh;
			chomp;
			if ( /Pulling translations for resource\s*(\S+)\s*\(source:\s*(.*\.pot)\)/) {
				my ($resource, $pot_file ) = ($1,$2);
				say "\n\e[38;5;6mPull $resource\e[0;m";
				say STDERR "pot file `$pot_file` not exists." unless -f $pot_file;
			} elsif ( /->\s*(.+):\s*.+\.po/ ){
				print "$1 ";
			} elsif ( /Done\./ ){
				print "\n";
			}'
		}
	}
	
#project->empty_all_changes
	sub empty_all_changes {
		my $self = shift;
		my $dir_name = $self->{dir_name};
		chdir $self->{project_root} or die $!;
		print "Empty all the changes in project \"$dir_name\".\n";
		open my $git_clean_pipe , "git clean -fd |";
		for (<$git_clean_pipe>) {
			chomp $_;
			unless ( m{.*/$} ) {
				say $_;
			}
		}
		close $git_clean_pipe;
		system " git stash ; git stash clear ";
	}
	

#project->git_pull_from_linuxdeepin
	sub git_pull_from_linuxdeepin {
		my $self = shift;
		my $project_root = $self->{project_root};
		chdir $project_root or die $!;
		print "\$ git pull \n";
		system "git pull";
		if ($?) {
			print STDERR "git pull on error\n";
			exit;
		}
	}

#project->test_lang
	sub test_lang {
		my ($self,$lang )= @_;
		$lang = 'zh_CN' if $lang eq '-';
		my $dir_name = $self->{dir_name};
		my $exec_path = $config->{_test}{$dir_name}; 
		$exec_path =~ s{<project_root>}($self->{project_root});
		print "exec path: $exec_path \n";
		print "\e[38;5;99m -- LANG = $lang \e[0;m\n";
		for my $r ( @{$self->{resource_objs} } ){
			my $po = $r->{lang_po_list}{$lang};
			my ($trans,$untrans) = main::msgstat($po);
			if ( $untrans == 0 ){
				print "\e[38;5;99m$trans/$untrans\t$po \e[0;m\n";
			} else {
				print "\e[38;5;99m$trans/\e[38;5;9m$untrans\t$po \e[0;m\n";
			}
		}
		system "LANG=$lang.UTF-8 LANGUAGE=$lang.UTF-8 $exec_path" ;
	}

#project->tx_resource_ids
	sub tx_resource_ids {
		my $self= shift;
		my @tx_resource_ids;
		my $ref_resources = $self->{resource_objs};
		for my $r ( @$ref_resources ){ 
			my $resource_id = $r->{project_name} .'.'. $r->{resource_name};
			push @tx_resource_ids, $resource_id; 
		}
		return @tx_resource_ids;
	}

#project->resources
	sub resources {
		my $self = shift;
		if ( $self->{count} == 1 ){
			my $resource_zero = $self->{resource_objs}[0];
			my $resource_name = $resource_zero->{resource_name};
			my $proj_name = $resource_zero->{project_name};
			
			return  ( "$proj_name.$resource_name" );		
		} else {
			my @resources;
			for my $r ( @{ $self->{resource_objs} } ){
				my $proj_name = $r->{project_name}; 
				my $resource_name = $r->{resource_name};
				push @resources, "$proj_name.$resource_name";
			}
			return @resources;
		}
	}

	sub print_project_list {
		print "$_\n" for sort keys %project_list;
		exit;
	}
	#	--update-tx-config

	sub update_tx_config {
		for my $p (keys %project_list ){
			my $proj = Project->new($p);
			for my $r ( @{ $proj->{resource_objs} } ){
				$r->update_tx_config( $tx_config );
			}

		}
		$tx_config->write($TX_CONFIG_FILE);

	}
	
	sub stat {
		my $self= shift;
		for my $r ( @{ $self->{resource_objs} } ){
			main::print_stat( $r->po_statistics );
		}

	}

}

package Resource {
	use List::MoreUtils qw(any);
	use File::Basename qw(dirname);
	use File::Spec;
	use Config::Tiny;
	use File::Copy;
	use Data::Dumper;
	sub new {
		my ( $class, $config, $section ) = @_;
		if ( !exists $config->{$section} ) {
			print STDERR "resource `$section` undefined.\n";
			exit 2;
		}
		my ( $dir_name , $git_branch ) = split /~/ , $section;
		$git_branch = "master" if !defined $git_branch;
		my $full_name = $dir_name;
		($dir_name ) = split /\./, $dir_name;
		
		my $url = $config->{$section}{resource_url};
		my ($project_name, $resource_name);
		if ( $url =~ m{^https://www.transifex.com/projects/p/([^/]+)/resource/([^/]+)/$} ){
			($project_name, $resource_name) = ($1,$2);
		}


		my $project_root = "$GIT_REPO_DIR/$dir_name",
		my $project_trans_root = "$TRANS_DIR/$dir_name";
		my $pot_file = $config->{$section}{pot_file};
		$pot_file =~ s/<project_root>/$project_root/;

		my $ts_file = $config->{$section}{ts_file};
		if ( defined $ts_file ){
			$ts_file =~ s/<project_root>/$project_root/;
		} else {	
			$ts_file = '';
		}
		

		my $po_file_filter = $config->{$section}{po_file_filter};
		my $trans_po_file_regex = $po_file_filter =~ s/<project_root>/$project_trans_root/r;
		my $git_po_file_regex = $po_file_filter =~ s/<project_root>/$project_root/r;
		$trans_po_file_regex =~ s/<lang>/([A-Za-z_]+)/;
		$git_po_file_regex =~ s/<lang>/([A-Za-z_]+)/;

		my $po_dir = ( split /<lang>/ , $po_file_filter )[0];
		$po_dir = dirname($po_dir);
		my $trans_po_dir = $po_dir =~ s/<project_root>/$project_trans_root/r;
		my $git_po_dir = $po_dir =~ s/<project_root>/$project_root/r;


		my %lang_po_list;
		my @git_po_files = qx(find $git_po_dir -iname "*.po" );
		for ( @git_po_files ) {
			chomp;
			if ( /^$git_po_file_regex$/ ){
				my ($lang,$file) = ($1,$_);
				$lang_po_list{$lang} = [ $file , '' ];
			}
		}

		my @trans_po_files = qx(find $trans_po_dir -iname "*.po" );
		for ( @trans_po_files ) {
			chomp;
			if ( /^$trans_po_file_regex$/ ){
				my ($lang,$file) = ($1,$_);

				if ( exists $lang_po_list{$lang} ){
					my $git_po = @{ $lang_po_list{$lang} }[0];
					$lang_po_list{$lang} = [ $git_po , $_ ];
				} else {

					$lang_po_list{$lang} = [ '', $_ ];
				}
			}
		}

		return bless { 
			data => $config->{$section} ,
			dir_name => $dir_name,
			full_name => $full_name,
			pot_file => $pot_file,
			ts_file => $ts_file,
			project_name => $project_name,
			project_root => $project_root,
			resource_name => $resource_name,
			git_po_file_regex => $git_po_file_regex,
			po_dir => $po_dir,
			lang_po_list => \%lang_po_list,
		} ,$class;
	}

#resource->push_lang
	sub push_lang {
		my ($self,$lang) = @_;
		my ($po_file_path, $trans_po_file_path ) = @{ $self->{lang_po_list}{$lang} };
		if ( ! defined $po_file_path ) {
			print STDERR "lang $lang not support.\n";
			exit 2;
		}

		unless ( -f $po_file_path ) {
			print STDERR "file `$po_file_path` not exits.\n";
			exit 2;
		}
		
		my $dir = dirname $trans_po_file_path;
		qx(mkdir -p $dir); 
		qx(cp $po_file_path $trans_po_file_path); 
		main::debug( "cp $po_file_path $trans_po_file_path \n");
		my $project_name = $self->{project_name};
		my $resource_name = $self->{resource_name};	
		chdir $TRANS_DIR or die $!;
		#print "\$ tx push -t -r $project_name.$resource_name -l $lang \n";
		system "tx push -t -r $project_name.$resource_name -l $lang \n";
		print "push lang \"$opt_push_lang\" to Transifex \n" if defined $opt_push_lang;
	}
	
#resource->update_tx_config
	sub update_tx_config {
		my ($self, $tx_cfg) = @_;
		my $section = $self->{project_name} . '.' . $self->{resource_name};
		$tx_cfg->{$section}{source_lang} = 'en';
		$tx_cfg->{$section}{type} = 'PO';
		
		my $source_file = $self->{data}{pot_file};
		my $dir = $self->{dir_name};
		$source_file =~ s/<project_root>/$dir/;
		$tx_cfg->{$section}{source_file} = $source_file;

		my $file_filter = $self->{data}->{po_file_filter};
		$file_filter =~ s/<project_root>/$dir/;
		$tx_cfg->{$section}{file_filter} = $file_filter; 

		print "[ $section ] \n";
		print Dumper $tx_cfg->{$section};	
	}

#resource->backup_git_po 
	sub backup_git_po {
		my $self =shift;
		my $lang_po = $self->{lang_po_list};
		for my $lang ( keys $lang_po ){
			my ($git_po,$trans_po ) = @{ $lang_po->{$lang} };
			qx(cp $git_po $git_po.b 2>/dev/null);
		}
	}

#resource->po_change_stat 
	sub po_change_stat {
		my $self =shift;
		my $lang_po = $self->{lang_po_list};
		my @po_need_git_add;
		for my $lang ( keys $lang_po ){
			my ($git_po,$trans_po ) = @{ $lang_po->{$lang} };

			if ( -f $git_po ){
				my $po_diff = qx(po_diff -s -o $git_po.b -n $git_po);
				chomp $po_diff;
				if ( $po_diff ne '' ){
					push @po_need_git_add, $git_po;
					print "[ $lang ]\n";
					print $po_diff . "\n";
				}

			}
		}
		return \@po_need_git_add;
	}
#resource->merge_po_git_with_transifex
	sub merge_po_git_with_transifex {
		my $self = shift;
		#my @po_files = values $self->{lang_po_list};
		my $lang_po = $self->{lang_po_list};
		main::debug("merge po git with transifex \nSkip merge zh_CN from transifex , only use git ,only push to transifex.\n");
		for my $lang ( keys $lang_po ){
			next if $lang eq 'zh_CN';
			my ($git_po,$trans_po ) = @{ $lang_po->{$lang} };
				main::debug("trans_po: $trans_po\ngit_po: $git_po\n");

			if ( ! -f $trans_po ) {
				warn "WARNING : merge_po_git_with_transifex : file `$git_po` not have trans version.\n";
			} elsif ( ( -f $trans_po ) && (! -f $git_po) ) {
				$git_po = $trans_po =~ s/^$TRANS_DIR/$GIT_REPO_DIR/r;
				main::debug("\$ cp '$trans_po' '$git_po' \n");	
				qx(cp '$trans_po' '$git_po');
			} else {
				qx(msgmerge -s '$trans_po' '$git_po' > '$git_po.o' 2>/dev/null);
				main::debug("\$ mv '$git_po.o' '$git_po' \n");
				qx(mv '$git_po.o' '$git_po')
			}

		}
		
	}

#resource->merge_po_with_pot
	sub merge_po_with_pot {
		print "merge po with pot\n";
		my $self = shift;
		my $pot = $self->{pot_file};

		my $lang_po = $self->{lang_po_list};
		for my $lang ( keys $lang_po ){
			my $git_po = @{ $lang_po->{$lang} }[0];
			next if $git_po eq '';
			qx(msgmerge -s -U  '$git_po' '$pot' 2>/dev/null );			

		}
		
	}

#resource->update_pot_file
	sub update_pot_file {

 		my $self = shift;
		my $project_root = $self->{project_root};
		my $pot_file = $self->{pot_file};
		#backup pot file
		qx(mv $pot_file $pot_file.save ; touch $pot_file);
		my $sf_list = $self->source_file_list;

		my $ts_file = $self->{ts_file};

#	Generate ts file
		if ( $ts_file ne '' ){
			main::debug("Generate ts file : $ts_file\n");
			my $deepin_lupdate = "/usr/lib/x86_64-linux-gnu/qt5/bin/deepin-lupdate";	
			system "$deepin_lupdate -recursive $self->{project_root} -ts $ts_file";
			
			main::debug("Covert ts to pot.\n");
			open my $lconvert_pipe, "lconvert -i $ts_file -of pot |";
			open my $pot_fh , '>' ,$pot_file;
			for ( <$lconvert_pipe> ){
				if ( ! /^msgctxt/ ){
					print $pot_fh $_;	
				}
			}
			close $pot_fh;
			close $lconvert_pipe;
		}	


		main::debug("\nwrite pot file : `$pot_file`\n" );
		main::debug("project root : $project_root\n");
		chdir $project_root or die "can't chdir to `$project_root` [ $! ]";
		for my $option ( sort keys %$sf_list ){	

			# write more clear pot file
			open my $xgettext , "|xgettext $option  --from-code=utf-8 -s -j -f - -o $pot_file 2>/dev/null"
				or die "error $!";
			for my $f ( @{ $$sf_list{$option} } ) {
					my $rel_path = File::Spec->canonpath( File::Spec->abs2rel( $f,$project_root ) );
					say $xgettext $rel_path;
					main::debug("source file: $rel_path\n");
			}
			close $xgettext
		}
	}

#resource->push_pot 
	sub push_pot {
		my $self = shift;
		my $pot_file_path = $self->{pot_file};
		my $trans_pot_file_path = $pot_file_path =~ s/$GIT_REPO_DIR/$TRANS_DIR/r;
 		
		my $dir = dirname $trans_pot_file_path;
		qx(mkdir -p $dir);
		qx( cp $pot_file_path $trans_pot_file_path);
		main::debug("cp $pot_file_path $trans_pot_file_path \n");
		
		my $resource_name = $self->{project_name}.'.'.$self->{resource_name};
		chdir $TRANS_DIR or die $!;
		#print "\$ tx push -s -r $resource_name \n";
		say "\e[38;5;207mpush pot file.\e[0;m";
		system "tx push -s -r $resource_name";
	}	

#resource->update_locale_config_ini
	sub update_locale_config_ini {
		my $self = shift;
		my $locale_config_file = $self->{data}{locale_config};
		if ( defined $locale_config_file ){
			$locale_config_file =~ s/<project_root>/$self->{project_root}/;
			if ( ! -f $locale_config_file ) {
				say "Not found 'tools/locale_config.ini' file";
				return;
			}
		} else {
			say "update_locale_config_ini : resource not defined locale_config key";
			return;
		}

		my $locale_cfg = Config::Tiny->new->read($locale_config_file);
		my @langs = map { "\"$_\"" } keys $self->{lang_po_list};
		if ( @langs ) {
			$locale_cfg->{locale}{langs} = "[" . ( join ',', sort @langs ) . "]";
			$locale_cfg->write($locale_config_file);
		}

	}


#resource->generate_mo
	sub generate_mo {
		my $self = shift;
		my $generate_mo_script = "generate_mo.py";
		my $locale_config_file = $self->{data}{locale_config};
		if ( defined $locale_config_file ) {
			$locale_config_file =~ s/<project_root>/$self->{project_root}/;	
			if ( ! -f $locale_config_file ) {
				say "Not found 'tools/locale_config.ini' file";
				return;
			}
		} else { 
			say "generate_mo : resource not defined locale_config key";
			return; 
		}

		my $tools_dir = dirname $locale_config_file;
		if ( -x -f "$tools_dir/$generate_mo_script" ) {
			chdir $tools_dir;
			print "\$ ./$generate_mo_script\n";
			system "./$generate_mo_script";
		}
	}

# resource->list_po_file
	sub list_po_file {
		my $self = shift;
		my $ref_po_file_list = $self->{lang_po_list};
		print "resource name: $self->{project_name}.$self->{resource_name}\n" ;
		for ( sort keys $ref_po_file_list ){
			my $po_list = $ref_po_file_list->{$_};
			my $git_po = $po_list->[0]; 
			my $trans_po = $po_list->[1];
			$git_po = "(git po not exists)" if $git_po eq '';
			$trans_po = "(trans po not exists)" if $trans_po eq '';
			print "[ $_ ]\n" . $git_po  . "\n" . $trans_po . "\n";
		}

	}

# resource->list_source_file
	sub list_source_file {
		my $self = shift;
		my $ref_sf_list = $self->source_file_list;
		say "resource name: $self->{project_name}.$self->{resource_name}" ;
		for (sort keys $ref_sf_list) {
			say "xgettext option : $_";
			for my $f ( @{ $ref_sf_list->{$_} } ){
				say "  " . $f; 
			}
		}
	}
	
	sub process_regex {
		my ($r,$project_root) = @_;
		$r =~ s/<project_root>/$project_root/;
		$r =~ s#\<\*\>#[^/]+#g;
		$r =~ s#\<\=\>#.+#g;
		print "regex $r\n";
		return $r;
	}
#resource->source_file_list
	sub source_file_list {
		my $self = shift;
		my $project_root = $self->{project_root};
		my @file_list = qx(find $project_root );
		@file_list = map { chomp $_; $_ } @file_list;

		my %regex_list;
		my @regex_keys = grep { /^source_file_regex(|\[.*\])$/ } keys $self->{data};
		my @ex_regex_keys = grep { /^exclude_source_file_regex(|\[.*\])$/ } keys $self->{data};
		my @ex_regexs;
		for ( @ex_regex_keys ){
			my $ex_regex = process_regex($self->{data}{$_} , $project_root );
			push @ex_regexs , $ex_regex;
		}
		for ( @regex_keys ){
			my $option;
			if ( /^source_file_regex\[[^:]*:(.*)\]$/ ){
				$option = $1;
			} else {
				$option = "-k_";
			}
			my $regex = process_regex( $self->{data}{$_} , $project_root );
			push @{ $regex_list{$option} }, $regex;
		}
	
		my %source_file_list;
		for my $option (sort keys %regex_list ){
			for my $f ( @file_list ){
				my $ref_regexs = $regex_list{$option};
				if ( any { $f =~ /$_/ } @$ref_regexs ){
					unless ( any { $f =~ /$_/ } @ex_regexs ){
						push @{ $source_file_list{"$option"} } , $f;
					}
				}
			}
			
		}
		return \%source_file_list;
	}

#resource->po_statistics
	sub po_statistics {
		my $self = shift;
		my $ref_po_files = $self->{lang_po_list};
		my %po_stat;
		
		for ( sort keys %{ $ref_po_files } ){
			my $git_po = @{ $ref_po_files->{$_} }[0];
			next if $git_po eq '';
			my ($lang,$file) = ($_ , $git_po );

			main::debug( "--- LANG = $lang \n" );
			$po_stat{$lang} = [ main::msgstat($file) ];
		}

		$po_stat{info} = $self->{project_name} .".". $self->{resource_name};
		return \%po_stat;
	}

}

sub msgstat {
	my $file = shift;	
	my $msgstat = qx(LC_ALL=C msgfmt --statistics -o /dev/null $file 2>&1);
	debug( $msgstat );
	my ($trans, $untrans);
	#like: 223 translated messages, 1 fuzzy translation, 2 untranslated messages.
	if ( $msgstat =~ /(\d+)\s*trans\D+(\d+)\s*fuzzy\D+(\d+)\s*untrans\D+/ ) {
		$trans = $1;
		$untrans = $2 + $3;
	} elsif ( $msgstat =~ /(\d+)\D+(\d+)?/ ){
		( $trans, $untrans ) = ( $1, $2 );
		$untrans = defined $untrans ? $untrans : 0;
	}
	debug( "trans $trans , untrans $untrans\n\n" );
	return ( $trans, $untrans );
}

sub print_stat {
	my $ref_po_stat = shift;
	my $n =0;

	#print head
	print "Stat Of Resource: " . $ref_po_stat->{info} ."\n";
	for my $lang ( sort keys %{ $ref_po_stat } ){
		next if $lang eq 'info';
		my $ref_arr = $$ref_po_stat{$lang};
		my $trans = $ref_arr->[0]; 
		my $untrans =  $ref_arr->[1];
		my $total = $trans + $untrans;
		my $per;
		if ( $total != 0 ) {
			$per  = $trans / $total; 
		} else {
			$per = 0;
		};
		debug("\ntrans = $trans,untrans = $untrans , total = $total\n");
		$per = sprintf '%d', 100 * $per;
		$n++;
		print "\e[38;5;136;1m$lang\t\e[38;5;118;2m$trans/$untrans\t\e[38;5;123;2m$per\t\e[0m";
		print "\n" if $n % 2 == 0; 

		if ( $lang eq $CAREFUL_LANG && $untrans != 0 ){
			system "zenity --info --text='lang [ $CAREFUL_LANG ] not translated completed !\n" .
			"trans = $trans, untrans = $untrans , total = $total' 2>/dev/null &";	
		}
	}
	print "\n" if $n % 2;
}

sub debug {
	print shift if $opt_debug;
}

sub install {
    my $cmd = "sudo apt-get install -y git transifex-client qttools5-dev-tools";
	say '$ '. $cmd;
	system $cmd;
}
