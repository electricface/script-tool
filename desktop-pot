#!/usr/bin/perl 
use warnings;
use strict;
use 5.14.2;
use Config::Tiny;
use Getopt::Std;
use File::Basename;
use POSIX 'strftime';
use Data::Dumper;

my $GIT_REPO_DIR= $ENV{GIT_REPO_DIR};
my $TRANS_DIR="$GIT_REPO_DIR/trans";
#my $DESKTOP_FILES_RESOURCE = 'desktop-files.deepin-all-desktoppot-1';
my $DESKTOP_FILES_RESOURCE ='test-all-desktop.deepin-all-desktoppot';

my $LANGUAGE_TEAM = "Linuxdeepin Translations Team";
my $DESKTOPS_DIR = "$GIT_REPO_DIR/desktop-files" ;
my $TRANS_DESKTOPS_DIR = "$TRANS_DIR/desktop-files";
my $PO_DIR = "$DESKTOPS_DIR/locale";
my $POT_FILE = "$PO_DIR/deepin-all-desktop.pot";

my %desktop_cfg ;
my @msgid ;
my %msg_id_entry ;
my @LANG;
# parse cmdline option.
my %opt;
getopts "dlbphg", \%opt;
print_help_message() if defined $opt{h} ;

for (glob "$TRANS_DESKTOPS_DIR/locale/*.po" ){
	m{locale/(.*)\.po};
	push @LANG , $1;
}
say "Languages:\n",join ', ', @LANG;

# read all desktop config info to %desktop_cfg.
my @apps;
for ( glob "$DESKTOPS_DIR/*.desktop" ){
	my $app = fileparse( $_, ".desktop" );
	push @apps,$app;
	$desktop_cfg{$app} = Config::Tiny->new->read($_) ;
}

if (defined $opt{g}) {
	generate_po_pot(); 
} elsif ( defined $opt{b} ){
	pull_po_from_tx();
} elsif ( defined $opt{p} ){
	push_pot_po();

# -l
} elsif ( defined $opt{l} ){
	#pull_po_from_tx();
	new_desktop( $DESKTOPS_DIR );
	generate_po_pot();
	#push_pot_po();
}

exit;


sub put_id_entry {
	my ($id , $new_entry ) = @_ ;
 	
	my $entry = $msg_id_entry{$id} ;
	if ( defined $entry ){
		push @$entry , $new_entry ;
 		$msg_id_entry{$id} = $entry ;
	} else {
		my $entry = [];
		push @$entry, $new_entry;
		$msg_id_entry{$id} = $entry ;
		push @msgid , $id ;
	}
}



sub pull_po_from_tx {
	chdir $TRANS_DIR;	
	chdir $TRANS_DIR;
	chdir $TRANS_DIR;
	print "pull po from tx\n";
	chdir $TRANS_DIR;
	system "tx pull -a -r $DESKTOP_FILES_RESOURCE |grep -v Skipping";
	debug( "cp -r $TRANS_DESKTOPS_DIR/locale $DESKTOPS_DIR/ \n");
	qx(cp -r $TRANS_DESKTOPS_DIR/locale $DESKTOPS_DIR/ );

}

sub push_pot_po {
	print "push pot and po file to tx\n";
	debug ("cp -r $DESKTOPS_DIR/locale $TRANS_DESKTOPS_DIR/ \n");	
	qx(cp -r $DESKTOPS_DIR/locale $TRANS_DESKTOPS_DIR/ );	
	chdir $TRANS_DIR;
	system "tx push -s -t -r $DESKTOP_FILES_RESOURCE --skip |grep -v 'Could not import file' ";
}

#write po and pot file
sub write_po_pot { 
	my %po_lang ;
	open my $pot ,'>', $POT_FILE or die ;
	&write_po_head($pot,"");
	#open *.po to write
	for my $l (@LANG){
		my $fname = "$PO_DIR/$l.po";
		debug("write_po_pot : fname = $fname\n");
		open my $fh ,'>', $fname or die ;
		&write_po_head($fh,$l);
		$po_lang{$l}= $fh;
	}

	for my $id (@msgid ){
		#entrys is po comment lines
		my $entrys = $msg_id_entry{$id};
		my %str_lang;
		my %entry_lang;

		#prepare msgstr for various language
		for my $e ( @$entrys ){
			my ($app,$sect,$k,$l ) = split "," , $e;

			$str_lang{$l} = $desktop_cfg{$app}{$sect}{$k . "[$l]"};

			my $entry_arr = $entry_lang{$l} ;
			if ( defined $entry_arr ){
				push @$entry_arr,"# $app [$sect].$k";
				#add entry to entry_lang{$l}
				$entry_lang{$l} = $entry_arr;
			} else {
				my $new_entry_arr =  [ ];
				push @$new_entry_arr , "# $app [$sect].$k";
				$entry_lang{$l} = $new_entry_arr;
			}
		}

		for my $l (@LANG){
 			my $str = $str_lang{$l} || "";
			#write *.po
			my $e_arr = $entry_lang{$l} ;
			my $po_fh = $po_lang{$l};

			#write po msgid comment 
			for ( @$e_arr ){
				say $po_fh $_;
			}
			say $po_fh "msgid \"$id\"";
			say $po_fh "msgstr \"$str\"\n";
		}
		
		#write pot standard language is zh_CN
		my $e = $entry_lang{"zh_CN"} ;
		say $pot $_ for @$e;	
		say $pot "msgid \"$id\"";
		say $pot "msgstr \"\"\n";
	}
	close $pot;
	close $_ for values %po_lang ; 
}


#option -g
sub generate_po_pot {
	my $po_dir = $PO_DIR;
	debug("generate_po_pot : po_dir = $po_dir \n");
	debug( "generate *.po and pot in $po_dir\n");
	for my $app (sort keys %desktop_cfg){
		for my $lang (@LANG) {
			for my $sect (keys %{ $desktop_cfg{ $app } }) {
				for my $key (qw/Name Comment/) {
					my $msgid = $desktop_cfg{$app}{$sect}{$key};
					if (defined $msgid){
						my $entry = "$app,$sect,$key,$lang";
						put_id_entry($msgid,$entry);
					}
				}
			}
		}
	}

	mkdir $po_dir;
	qx(rm -f $po_dir/* 2>&1 >/dev/null );
	write_po_pot();
}


 

sub write_po_head {
	my ($PO,$lang) = @_;
	$lang = "" if !defined $lang;
	my $po_create_time = strftime "%Y-%m-%d %H:%M:%S%z" ,localtime;
	say $PO "msgid \"\"\nmsgstr \"\" ";
	say $PO "\"Project-Id-Version: deepin-all-desktop v1.0\\n\"
\"POT-Creation-Date: $po_create_time\\n\"
\"PO-Revision-Date: $po_create_time\\n\"
\"Last-Translator: Automatically generated\\n\"
\"Language-Team: $LANGUAGE_TEAM\\n\"
\"MIME-Version: 1.0\\n\"
\"Content-Type: text/plain; charset=UTF-8\\n\"
\"Content-Transfer-Encoding: 8bit\\n\"
\"Language: $lang\\n\"
";

}

sub write_desktop {
	my ($app,$file_path) = @_;
	open my $fh , '>' , $file_path;
	my @sects = sort keys %{ $desktop_cfg{$app} };
	my @sorted_sects = ('Desktop Entry');
	for ( @sects ){
		push @sorted_sects, $_ if $_ ne 'Desktop Entry'
	}
	for my $sect ( @sorted_sects  ){
		say $fh "[$sect]";
		for my $key (sort %{ $desktop_cfg{$app}{$sect} } ){
			my $value = $desktop_cfg{$app}{$sect}{$key};
			say $fh "$key=$value" if defined $value and $value ne '';
		}
		print $fh "\n";
	}
	close $fh;
}

sub new_desktop {
	my $output_dir = shift;
	mkdir $PO_DIR;
	mkdir $output_dir 
		or say STDERR "Failed to make dir $output_dir";

	for my $po ( glob "$PO_DIR/*.po" ){
		parse_po($po) 
	}

# write all desktop one time
	for my $app ( @apps ){
		my $desktop_file_path = "$DESKTOPS_DIR/$app.desktop";	
		write_desktop($app, $desktop_file_path);
		debug( "new desktop of $app: '$desktop_file_path' \n");
		
	}
}
sub parse_po {
	my $po_f = shift;
	my $lang= fileparse($po_f , ".po");
	open my $PO,'<', $po_f 
		or die "can't open file '$po_f' : $!";
	my @entry ;
	while (my $line = <$PO> ){
		if ( $line =~ m/\#\s(\S+)\s\[(.*)\]\.(\w+)/){
			debug ("lang:$lang\napp:[$1]\nitem:[$2]\nkeyname:[$3]\n" );
			push @entry , [ $1, $2, $3 ];
		} 
		elsif ( $line =~ /^\s*msgid\s*"(.*)"$/ ){
			my $str;
			$_ = <$PO>;
			if ( /^\s*msgstr\s*"(.*)"/ ){
				$str = $1;
			} else {
				die "Not match msgstr { $_ } in $po_f";
			}
			while ( @entry ){
				my $ref_entry = pop(@entry);
				my $app = $ref_entry->[0];
				my $section = $ref_entry->[1];
				my $key = $ref_entry->[2];
				debug ("parse po ($app,$section,$key) \n");
				$desktop_cfg{$app}{$section}{$key."[$lang]" } = $str if $str ne "";

			}
		}
	}
	close $PO;
}

sub print_help_message {
	say "本脚本处理 deepin desktop 文件的国际化
-g \t\tGenerate po and pot
-a <app>  \tMerger *.po  files to an app desktop file. 
-h \t\thelp
-l 自动做好所有事情
修改 msgid (desktop 文件中的 Name 字段)在本地
修改 msgstr (desktop 文件中的 Name[*] 和 Comment[*] 字段) 在 transifex 平台上
";

	exit;
}


sub debug {
	my $i = shift;
	print $i if $opt{d};	
}
