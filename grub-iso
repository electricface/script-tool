#!/usr/bin/perl -w
use strict;
use File::Basename;
use File::Temp 'tempfile';
use File::Spec::Functions qw(canonpath rel2abs);
use Getopt::Long qw(:config no_ignore_case);
use File::Slurp;
use 5.14.2;
my $GRUB_CUSTOM_PATH ='/etc/grub.d/40_custom';

my ($tempf_fh,$tempf_path) = tempfile();
my $grub_custom_content ='';
$grub_custom_content = read_file($GRUB_CUSTOM_PATH)
	if ( -f -r $GRUB_CUSTOM_PATH );

my (@opt_add, @opt_delete, $opt_list, $opt_update_grub );
GetOptions(
	"add=s{,}" => \@opt_add,
	"delete=s{,}" => \@opt_delete,
	"list!" => \$opt_list,
	"help!" => \&print_help_message,
	"update-grub" => \$opt_update_grub,
);

if ( $opt_list ){
	list_grub_custom();
	exit;
}
my $GRUB_CUSTOM_HEAD ='#!/bin/sh
exec tail -n +4 $0
#don\'t delete `exec` line;
';

#add executable head if need
if ($grub_custom_content !~ /exec tail/){
	$grub_custom_content = $GRUB_CUSTOM_HEAD . $grub_custom_content;
}


for my $iso_path (@opt_add){
	my ($iso_id, $new_str )= get_entry_define_str( $iso_path );
	if ( $grub_custom_content !~ /$iso_id/ ){
		#append
		say "append";
		$grub_custom_content .= $new_str;
	} 
	else {
		#replace
		say "replace";
		$grub_custom_content =~ s/\n*#start:$iso_id.*#end:$iso_id\n*/$new_str/s;
	}
};

for ( @opt_delete ){
	my $iso_id = get_entry($_);
	$grub_custom_content =~ s/\n*#start:$iso_id.*#end:$iso_id\n*//s
}

if ( @opt_add || @opt_delete || $opt_update_grub ){
	do_with_temp_file();

	if ( $opt_update_grub ){
		qx(sudo update-grub);
	}

} else {
	print_help_message();
}
#end;

sub print_help_message {
	print <<_EOF_;
-a -add <iso> add iso 
-d --delete <iso> rm iso
-u --update-grub run `sudo update-grub` command
-l --list list iso found in $GRUB_CUSTOM_PATH;
-h --help show help message
_EOF_
exit;
}

sub list_grub_custom {
my ($menu_entry,$iso_path);
format LS_GRUB_CUSTOM =
@<<<<<<<<<<<<<<<<<<<<<<<<<<<< @| @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$menu_entry,'--',$iso_path
.
	$~ = 'LS_GRUB_CUSTOM';
	for (split /\n/, $grub_custom_content ){
		if ( /^#start:(.*),path:(.*)$/ ){
			$menu_entry=$1;
			$iso_path=$2;
			write;
		}
	}
}

sub do_with_temp_file {
	print $tempf_fh $grub_custom_content;
	close $tempf_fh;
	qx(sudo mv $tempf_path $GRUB_CUSTOM_PATH);

	#chmod +x
	qx(sudo chmod 0755 $GRUB_CUSTOM_PATH);
	qx(sudo chown root:root $GRUB_CUSTOM_PATH);

}

END { 
	unlink $tempf_path;
}


sub get_iso_info {
	my $iso_path = shift;
	my @isoinfo_descript = qx(isoinfo -d -i $iso_path);
	my $isoinfo_opt ='' ;
	my $volume_id = '';
	for my $line ( @isoinfo_descript ){
		$volume_id = $1 if  ( $line =~ /Volume id:(.*)$/ );
		$isoinfo_opt = '-J' if $line =~ m{^Joliet\b}m;
		$isoinfo_opt = '-R' if $line =~ m{^Rock Ridge\b}m;
	}

	my @files = qx(isoinfo -i $iso_path $isoinfo_opt -f );	
	return $volume_id, \@files; 
}

sub get_disk_and_mntpoint {
	my $iso_path =shift;
	my @mnts = qx(findmnt -rc);
	@mnts = map { [ split /\s/,$_ ] } @mnts;
	my @match_result = grep { $iso_path =~ /^$_->[0]/ } @mnts;
	my @sorted_match_result = sort { 
		length($b->[0]) <=> length($a->[0]) } @match_result;
	my $device = $sorted_match_result[0]->[1];
	my $mnt_point = $sorted_match_result[0]->[0];
	if ($device =~ m[/dev/sd([a-z])(\d+)] ){
		my $num = ord( $1 ) - ord( 'a');
		say "(hd$num,msdos$2) \n mount point: $mnt_point";
		return "(hd$num,msdos$2)",$mnt_point;
	}
}

sub get_entry {
	my $iso_path =shift;
	my $menu_entry = fileparse($iso_path,'.iso');
	$menu_entry =~ s/-/ /g;
	return $menu_entry;
}

sub get_entry_define_str {
	my $iso_path = shift;
	my ($basename,$path,$suffix) = fileparse( $iso_path, '.iso' );
	my $cpath = canonpath( "$path/$basename.iso" );
	$cpath = rel2abs( $cpath );
	if ( -f $cpath ){
		say STDERR "\nFound iso $cpath";
	} else {
		say STDERR "Not found iso file ”$cpath“";
		exit;
	};
	my ($root_disk,$mnt_point) = get_disk_and_mntpoint($cpath) ;
	
	my ( $volume_id , $files_ref ) = get_iso_info( $cpath );
	my $vmlinuz_path;
	my $initrd_path;
	my $seed_path;
	for my $f ( @$files_ref ){
		chomp $f;
		if ( $f =~ m{/casper/vmlinuz} ){
			$vmlinuz_path = $f;
		} 
		elsif ( $f =~ m{/casper/initrd} ){
			$initrd_path = $f;
		}
		elsif ( $f =~ m{/preseed/.*\.seed} ){
			$seed_path = $f;
		}
	}
	say "Volume id:$volume_id
initrd: $initrd_path
vmlinuz: $vmlinuz_path
seed: $seed_path";
	my $grub_path = $cpath =~ s/^$mnt_point//r;

	if ( !defined $vmlinuz_path || !defined $initrd_path ){
		die "can't file vmlinuz or initrd";
	}

	return $basename, <<_EOF_ ;

#start:$basename,path:$cpath
menuentry "$volume_id -- $basename" {
	set root=$root_disk
	insmod loopback
	loopback loop $root_disk$grub_path
	linux (loop)$vmlinuz_path file=(loop)$seed_path boot=casper iso-scan/filename=$grub_path noprompt noeject
	initrd (loop)$initrd_path
}
#end:$basename
_EOF_
}
